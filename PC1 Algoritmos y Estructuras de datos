#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

class Cliente
{
public:
	long dni;
	string nombre, apellido;
	Orden *objOrden;
	Item *objItem;
public:
	Cliente(long dni, string nombre, string apellido, long numero, float total, string producto, float cantidad)
		:dni(dni), nombre(nombre), apellido(apellido){
		objOrden = new Orden(numero, total);
		objItem = new Item(producto, cantidad);
	}
	Orden *getobjOrden(){ return objOrden; }
	Item *getobjItem(){ return objItem; }
	string toString()
	{
		stringstream ss;
		ss << dni << "," << apellido << "," << nombre;
		return ss.str();
	}
};
class Orden
{
public:
	long numero;
	float total;
public:
	Orden(long numero, float total) :numero(numero), total(total){}
	string toString()
	{
		stringstream ss;
		ss << numero << "," << total;
		ss.str();
	}
};
class Item
{
public:
	string producto;
	float cantidad;
public:
	Item(string producto, float cantidad) : producto(producto), cantidad(cantidad){}
	string toString()
	{
		stringstream ss;
		ss << producto << "," << cantidad;
		ss.str();
	}
};

class GestionCompra
{
private:
	vector<Cliente*>clientes;
	vector<Item*>items;
	vector<Orden*>ordenes;
public:
	~GestionCompra()
	{
		for (int i = 0; i < clientes.size(); i++)
		{
			delete clientes[i];
			delete ordenes[i];
			delete items[i];
		}
	}
	long buscarDni(long dni)
	{
		for (int i = 0; i < clientes.size(); i++)
		{
			if (clientes[i]->dni == dni)
			{
				return i;
			}
		} return -1;
	}
	bool eliminarPorDni(long dni)
	{
		for (int i = 0; i < clientes.size(); i++)
		{
			int pos = buscarDni(dni);
			if (pos == -1) false;
			else
			{
				clientes.erase(clientes.begin() + pos);
				return true;
			}
		}
	}
	Item *buscar(string producto)
	{
		for (int i = 0; i < clientes.size(); i++)
		{
			if (clientes[i]->objItem->producto == producto)
				return items[i];
		} return nullptr;
	}
	bool modificarDatosItem(long dni, string producto, float cantidad)
	{
		double pos = buscarDni(dni);
		if (pos == -1) return false;
		else
		{
			clientes[pos]->objItem->cantidad = cantidad;
			clientes[pos]->objItem->producto = producto;
			return true;
		}
	}
	void listarOrdenes(string apellido)
	{
		for (int i = 0; i < clientes.size(); i++)
		{
			if (clientes[i]->apellido == apellido)
			{
				cout << "Numero de orden: " << clientes[i]->objOrden->numero << endl;
				cout << "Total de ordenes: " << clientes[i]->objOrden->total << endl;
			}
		}
	}

	void registrarDatos(long dni, string nombre, string apellido, long numero, float total, string producto, float cantidad)
	{
		clientes.push_back(new Cliente(dni, nombre, apellido, numero, total, producto, cantidad));
	}
	void mostrarDatos()
	{
		for (int i = 0; i < clientes.size(); i++)
		{
			cout << clientes[i]->toString(); cout << endl;
			cout <<clientes[i]->objItem->toString(); cout << endl;
			cout <<clientes[i]->objOrden->toString(); cout << endl;;
		}
	}
	void leerDatos()
	{
		ifstream archivo("clientes.csv");
		if (!archivo.is_open()) return;
		string nombre, apellido, producto;
		long dni, numero;
		float total, cantidad;
		string linea, num;
		while (getline(archivo, linea))
		{
			stringstream ss(linea);
			getline(ss, num, ','); dni = atol(num.c_str());
			getline(ss, apellido, ',');
			getline(ss, nombre, ',');
			getline(ss, num, ','); numero = atol(num.c_str());
			getline(ss, num, ','); total = stof(num.c_str());
			getline(ss, producto, ',');
			getline(ss, num); cantidad = stof(num.c_str());
			clientes.push_back(new Cliente(dni, nombre, apellido, numero, total, producto, cantidad));
		}
		archivo.close();
	}
	void guardarDatos()
	{
		ofstream archivo("clientes.csv");
		if (!archivo.is_open()) return;
		for (int i = 0; i < clientes.size(); i++)
		{
			archivo << clientes[i]->toString() << "," << clientes[i]->objOrden->toString() << "," << clientes[i]->objItem->toString() << endl;
		}
		archivo.close();
	}
};
int main()
{
	GestionCompra *gc = new GestionCompra();
	string nombre, apellido, producto;
	long dni, numero;
	float cantidad, total;
	int op;
	bool cont = true;
	while (cont)
	{
		cout << endl << "-------------------------------------------------" << endl;
		cout << "Bienvenido a la tienda Jaimito" << endl;
		cout << "1.- Registrar datos del cliente." << endl;
		cout << "2.- Eliminar clientes por dni." << endl;
		cout << "3.- Listar orden por apellido del cliente." << endl;
		cout << "4.- Modificar datos de item." << endl;
		cout << "5.- Buscar item por nombre." << endl;
		cout << "6.- Mostrar datos." << endl;
		cout << "7.- Salir." << endl;
		cout << "OPCION: "; cin >> op;
		switch (op)
		{
		case 1:
			do
			{
				cout << "Ingrese dni: "; cin >> dni;
				cout << "Ingrese apellido: "; getline(cin, apellido);
				cout << "Ingrese nombre: "; getline(cin, nombre);
				if (nombre == ""); break;
				cout << "Ingrese numero de orden: "; cin >> numero;
				cout << "Ingrese total de ordenes: "; cin >> total;
				cout << "Ingrese producto: "; getline(cin, producto);
				cout << "Ingrese cantidad: "; cin >> cantidad;
				gc->registrarDatos(dni, apellido, nombre, numero, total, producto, cantidad);
			} while (nombre != ""); break;
		case 2:
			cout << "Ingrese dni: "; cin >> dni;
			gc->eliminarPorDni(dni);
			break;
		case 3:
			cout << "Ingrese apellido: "; getline(cin, apellido);
			gc->listarOrdenes(apellido); break;
		case 4:
			cout << "Ingrese dni: "; cin >> dni;
			cout << "Ingrese producto: "; getline(cin, producto);
			cout << "Ingrese cantidad: "; cin >> cantidad;
			gc->modificarDatosItem(dni, producto, cantidad); break;
		case 5:
			cout << "Ingrese nombre de producto: "; getline(cin, nombre);
			gc->buscar(nombre); break;
		case 6:
			gc->mostrarDatos(); break;
		case 7:
			cout << "Gracias por tu preferencia.\n";
			cont = false;
			break;
		}
	}
	gc->leerDatos();
	gc->guardarDatos();
	system("pause");
	return 0;
}
