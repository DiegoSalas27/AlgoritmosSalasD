#pragma once
#ifndef _LISTA_H_
#define _LISTA_H_

template<class T>

class ListaSE {
	struct Nodo {
		T elem;
		Nodo *next;
		Nodo(T elem = 0, Nodo *next = nullptr) : elem(elem), next(next) {}
	};
	Nodo *inicio;
	int n;
public:
	class Iterador{
		Nodo* aux;
	public:
		Iterador(Nodo* aux = nullptr) : aux(aux) {}
		void operator ++(int dummy) { aux = aux->next; }
		bool operator != (Iterador it) { return aux != it.aux; }
		T operator *() { return aux->elem; }
	};
public:
	ListaSE() : n(0), inicio(nullptr) {}
	~ListaSE() {
		while (inicio != nullptr) {
			Nodo *aux = inicio;
			inicio = inicio->next;
			delete aux;
		}
	}
	Iterador inicial()
	{
		return Iterador(inicio);
	}
	Iterador ultimo()
	{
		return Iterador(nullptr);
	}

	int tamannio()
	{
		return n;
	}
	bool insertarInicio(T elem)
	{
		Nodo *nuevo = new Nodo(elem, inicio);
		if (nuevo == nullptr) return false;
		inicio = nuevo;
		++n;
		return true;
	}
	bool insertarPOS(T elem, int pos)
	{
		if (pos < 0 || pos > n) return false;
		if (pos == 0) insertarInicio(elem);
		int c = 1;
		Nodo *aux = inicio;
		while (c++ < pos)
		{
			aux = aux->next;
		}
		Nodo *nuevo = new Nodo(elem, aux->next);
		aux->next = nuevo;
		++n;
		return true;
	}
	bool insertarFinal(T elem)
	{
		insertarPOS(elem, n);
		return true;
	}
	bool eliminarInicio()
	{
		if (n == 0) return false;
		Nodo * aux = inicio;
		inicio = inicio->next;
		delete aux;
		--n;
		return true;
	}
	bool eliminarPOS(int pos)
	{
		if (pos < 0 || pos > n) return false;
		if (pos == 0) eliminarInicio();
		if (n == 0) return false;
		int c = 1;
		Nodo *aux = inicio;
		if (n == 1) { delete aux; return true; }
		while (c++ < pos)
		{
			aux = aux->next;
		}
		Nodo *aux2 = aux->next;
		aux->next = aux2->next;
		delete aux2;
		--n;
		return true;
	}
	bool eliminarFinal()
	{
		if (n == 0) return false;
		eliminarPOS(n - 1);
		return true;
	}
	T buscarPOS(int pos)
	{
		if (n == 0) return false;
		if (pos < 0 || pos > n) return false;
		Nodo *aux = inicio;
		int c = 1;
		while (c++ <= pos)
		{
			aux = aux->next;
		}
		return aux->elem;
	}
};
#endif

#include <iostream>
#include "Lista.h"

using namespace std;

ostream& operator << (ostream& os, ListaSE<int>&l)
{
	os << "[ ";
	bool ini = true;
	ListaSE<int>::Iterador it;
	for (it = l.inicial(); it != l.ultimo(); it++)
	{
		os << (ini ? "" : " ") << *it;
		ini = false;
	}
	os << " ]";
	return os;
}

int main()
{
	ListaSE<int> l;
	for (int i = 0; i < 10; i++)
	{
		l.insertarInicio(i);
	}
	l.eliminarInicio();
	l.eliminarPOS(3);
	l.eliminarFinal();
	l.insertarInicio(2);
	l.insertarPOS(3, 3);
	l.insertarFinal(14);

	cout << l << endl;

	cout << l.buscarPOS(2) << endl;
	system("pause");
	return 0;
}
// :)
